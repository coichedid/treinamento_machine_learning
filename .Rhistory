getwd()
dir.create("treinamento")
setwd("treinamento")
source('~/treinamento/exemplo_01.r')
ones
D.half
debugSource('~/treinamento/exemplo_01.r')
X
X
X
ones
xbar
t <- colMeans(X)
t
t <- rowMeans(X)
t
sdX
D.half
?solve
S
R
p       <- 2                     # numero de variaveis
n       <- 4                     # tamanho da amostra
X       <- matrix(0,p,n)         # definindo X
X[1, ]  <- c( 4,  5,  4,  3)     # valores de X_{1i}
X[2, ]  <- c(42, 52, 48, 58)     # valores de X_{1i}
ones    <- matrix(1,n,1)         # vetor de uns
xbar    <- (X%*%ones) / n        # vetor de medias
sdX     <- apply(X,1,"sd")       # d. padrao das variaveis
D.half  <- diag(sdX,p,p)         # matriz Delta^{1/2}
X.xbar  <- X-xbar%*%t(ones)      # matriz (X - xbarra*ones')
W       <- X.xbar%*%t(X.xbar)    # somas dos desvios ao
# quadrados e cruzados
S       <- W/(n-1)               # matriz de covariancias
ID.half <- solve(D.half)         # matriz Delta^{-1/2}
R       <- ID.half%*%S%*%ID.half # matriz de correlacoes
xbar # vetor de medias
S    # matriz de covariancias
R    # matriz de correlacoes
p       <- 2                     # numero de variaveis
n       <- 4                     # tamanho da amostra
X       <- matrix(0,p,n)         # definindo X
X[1, ]  <- c( 4,  5,  4,  3)     # valores de X_{1i}
X[2, ]  <- c(42, 52, 48, 58)     # valores de X_{1i}
ones    <- matrix(1,n,1)         # vetor de uns
xbar    <- (X%*%ones) / n        # vetor de medias
sdX     <- apply(X,1,"sd")       # d. padrao das variaveis
D.half  <- diag(sdX,p,p)         # matriz Delta^{1/2}
X.xbar  <- X-xbar%*%t(ones)      # matriz (X - xbarra*ones')
W       <- X.xbar%*%t(X.xbar)    # somas dos desvios ao
# quadrados e cruzados
S       <- W/(n-1)               # matriz de covariancias
ID.half <- solve(D.half)         # matriz Delta^{-1/2}
R       <- ID.half%*%S%*%ID.half # matriz de correlacoes
xbar # vetor de medias
S    # matriz de covariancias
R    # matriz de correlacoes
apply(X,1,"mean") # vetor (linha) de medias
var(t(X))         # matriz de covariancias
cor(t(X))         # matriz de correlacoes
# IMPORTANTE: note a transposicao da matriz X.
# Note que o R entende variaveis por colunas e
# as amostras por linha. Entao e' necessario
# transpor a matriz de dados
p       <- 3                      # numero de variaveis
n       <- 10000                  # tamanho da amostra
X       <- matrix(rnorm(p*n),p,n) # definindo X
#pdf(file="dispersao_pairs.pdf")
#par(mfrow=c(1,1),lwd=2.0,cex.lab=1.5,cex.axis=1.5,
#    lab=c(10,5,5),mar=c(0,1,0,2.5),xpd=T,cex.main=2.0)
pairs(t(X),pch=15)
dim(X)
names(X)
head(X)
apply(X,1,"mean")  # vetor (linhas) de medias
var(t(X))          # matriz de covariancias
cor(t(X))          # matriz de correlacoes
?t
install.packages("mvtnorm")
library(mvtnorm)
library(mvtnorm)
nx  <- 100
ny  <- 100
x   <- seq(-4,4,length=nx)
y   <- seq(-4,4,length=ny)
z   <- matrix(NA,nx,ny)
mu  <- c(0,0)
S   <- matrix(c(1, .7, .7, 1),2,2)
library(mvtnorm)
nx  <- 100
ny  <- 100
x   <- seq(-4,4,length=nx)
y   <- seq(-4,4,length=ny)
z   <- matrix(NA,nx,ny)
mu  <- c(0,0)
S   <- matrix(c(1, .7, .7, 1),2,2)
library(mvtnorm)
nx  <- 100
ny  <- 100
x   <- seq(-4,4,length=nx)
y   <- seq(-4,4,length=ny)
z   <- matrix(NA,nx,ny)
mu  <- c(0,0)
S   <- matrix(c(1, .7, .7, 1),2,2)
for(i in 1:nx)
for(j in 1:ny)
z[i,j] <- dmvnorm(c(x[i],y[j]), mean=mu,sigma=S)
# Grafico 1
x11()
persp(x,y,z, phi = 45, theta = 30,col=3)
# Grafico 2
x11()
contour(x,y,z,col=2,lwd=2)
nx  <- 100
ny  <- 100
x   <- seq(-4,4,length=nx)
y   <- seq(-4,4,length=ny)
z   <- matrix(NA,nx,ny)
mu  <- c(0,0)
S   <- matrix(c(1, .99, .99, 1),2,2)
for(i in 1:nx)
for(j in 1:ny)
z[i,j] <- dmvnorm(c(x[i],y[j]), mean=mu,sigma=S)
# Grafico 1
x11()
persp(x,y,z, phi = 45, theta = 30,col=3)
# Grafico 2
x11()
contour(x,y,z,col=2,lwd=2)
w <- rmvnorm(100000,mean=mu,sigma=S)
#Grafico 3
x11()
par(mfrow=c(2,2))
plot(w,pch=".",main="",xlab="x",ylab="y")
hist(w[,2],prob=T,nclass=50,main="",xlab="y")
lines(y,dnorm(y),lwd=2,col=2)
hist(w[,1],prob=T,nclass=50,main="",xlab="x")
lines(x,dnorm(x),lwd=2,col=2)
#Grafico 3
x11()
par(mfrow=c(2,2))
contour(w,col=2,lwd=2)
plot(w,pch=".",main="",xlab="x",ylab="y")
hist(w[,2],prob=T,nclass=50,main="",xlab="y")
lines(y,dnorm(y),lwd=2,col=2)
hist(w[,1],prob=T,nclass=50,main="",xlab="x")
lines(x,dnorm(x),lwd=2,col=2)
#Grafico 3
x11()
par(mfrow=c(2,2))
contour(w[,1][w,2],col=2,lwd=2)
plot(w,pch=".",main="",xlab="x",ylab="y")
hist(w[,2],prob=T,nclass=50,main="",xlab="y")
lines(y,dnorm(y),lwd=2,col=2)
hist(w[,1],prob=T,nclass=50,main="",xlab="x")
lines(x,dnorm(x),lwd=2,col=2)
dim(w)
p <- 3 # dimensao
n <- 100000 # tamanho da amostra
# estrutura de covariancia (correlacao)
SIGMA <- matrix(c(1,0.9,0.8,0.9,1,0.7,0.8,0.7,1),p,p,T)
# normais independentes
x <- matrix(rnorm(p*n),n,p) # note a transposicao
p <- 3 # dimensao
n <- 100000 # tamanho da amostra
# estrutura de covariancia (correlacao)
SIGMA <- matrix(c(1,0.9,0.8,0.9,1,0.7,0.8,0.7,1),p,p,T)
# normais independentes
x <- matrix(rnorm(p*n),n,p) # note a transposicao
SIGMA
S <- svd(SIGMA) # decomposicao de SIGMA
class(S)
names(S)
T <- S$u%*%diag(sqrt(S$d)) # construcao da matriz T
y <- x%*%t(T) # gerando valores
cor(y); SIGMA
# Usando a decomposicao de Cholesky
T <- chol(SIGMA)
y <- x%*%T
cor(y); SIGMA
